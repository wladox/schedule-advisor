// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: mesh_api.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GraphNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *NodeId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Info *NodeInformation `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GraphNode) Reset() {
	*x = GraphNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphNode) ProtoMessage() {}

func (x *GraphNode) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphNode.ProtoReflect.Descriptor instead.
func (*GraphNode) Descriptor() ([]byte, []int) {
	return file_mesh_api_proto_rawDescGZIP(), []int{0}
}

func (x *GraphNode) GetId() *NodeId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GraphNode) GetInfo() *NodeInformation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GraphNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*GraphNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GraphNodes) Reset() {
	*x = GraphNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphNodes) ProtoMessage() {}

func (x *GraphNodes) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphNodes.ProtoReflect.Descriptor instead.
func (*GraphNodes) Descriptor() ([]byte, []int) {
	return file_mesh_api_proto_rawDescGZIP(), []int{1}
}

func (x *GraphNodes) GetNodes() []*GraphNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NodeInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalInformation []*Metric `protobuf:"bytes,1,rep,name=localInformation,proto3" json:"localInformation,omitempty"`
	PeerInformation  []*Metric `protobuf:"bytes,2,rep,name=peerInformation,proto3" json:"peerInformation,omitempty"`
	Id               string    `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NodeInformation) Reset() {
	*x = NodeInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInformation) ProtoMessage() {}

func (x *NodeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInformation.ProtoReflect.Descriptor instead.
func (*NodeInformation) Descriptor() ([]byte, []int) {
	return file_mesh_api_proto_rawDescGZIP(), []int{2}
}

func (x *NodeInformation) GetLocalInformation() []*Metric {
	if x != nil {
		return x.LocalInformation
	}
	return nil
}

func (x *NodeInformation) GetPeerInformation() []*Metric {
	if x != nil {
		return x.PeerInformation
	}
	return nil
}

func (x *NodeInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_mesh_api_proto_rawDescGZIP(), []int{3}
}

type NodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NodeId) Reset() {
	*x = NodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeId) ProtoMessage() {}

func (x *NodeId) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeId.ProtoReflect.Descriptor instead.
func (*NodeId) Descriptor() ([]byte, []int) {
	return file_mesh_api_proto_rawDescGZIP(), []int{4}
}

func (x *NodeId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_mesh_api_proto_rawDescGZIP(), []int{5}
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Peer       string  `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Metric     float64 `protobuf:"fixed64,3,opt,name=metric,proto3" json:"metric,omitempty"`
	MetricName string  `protobuf:"bytes,4,opt,name=metricName,proto3" json:"metricName,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_mesh_api_proto_rawDescGZIP(), []int{6}
}

func (x *Metric) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Metric) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *Metric) GetMetric() float64 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Metric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

var File_mesh_api_proto protoreflect.FileDescriptor

var file_mesh_api_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x52, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a, 0x0a, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x91, 0x01,
	0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x0a, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0xba, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x68, 0x52, 0x50, 0x43, 0x12, 0x3e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x2c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x00, 0x42, 0x1a, 0x0a,
	0x18, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mesh_api_proto_rawDescOnce sync.Once
	file_mesh_api_proto_rawDescData = file_mesh_api_proto_rawDesc
)

func file_mesh_api_proto_rawDescGZIP() []byte {
	file_mesh_api_proto_rawDescOnce.Do(func() {
		file_mesh_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_mesh_api_proto_rawDescData)
	})
	return file_mesh_api_proto_rawDescData
}

var file_mesh_api_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_mesh_api_proto_goTypes = []interface{}{
	(*GraphNode)(nil),       // 0: api.GraphNode
	(*GraphNodes)(nil),      // 1: api.GraphNodes
	(*NodeInformation)(nil), // 2: api.NodeInformation
	(*Empty)(nil),           // 3: api.Empty
	(*NodeId)(nil),          // 4: api.NodeId
	(*Response)(nil),        // 5: api.Response
	(*Metric)(nil),          // 6: api.Metric
}
var file_mesh_api_proto_depIdxs = []int32{
	4, // 0: api.GraphNode.id:type_name -> api.NodeId
	2, // 1: api.GraphNode.info:type_name -> api.NodeInformation
	0, // 2: api.GraphNodes.nodes:type_name -> api.GraphNode
	6, // 3: api.NodeInformation.localInformation:type_name -> api.Metric
	6, // 4: api.NodeInformation.peerInformation:type_name -> api.Metric
	2, // 5: api.ResourceMeshRPC.UpdateNodeInformation:input_type -> api.NodeInformation
	4, // 6: api.ResourceMeshRPC.GetNodeInformation:input_type -> api.NodeId
	3, // 7: api.ResourceMeshRPC.GetAllNodes:input_type -> api.Empty
	5, // 8: api.ResourceMeshRPC.UpdateNodeInformation:output_type -> api.Response
	2, // 9: api.ResourceMeshRPC.GetNodeInformation:output_type -> api.NodeInformation
	1, // 10: api.ResourceMeshRPC.GetAllNodes:output_type -> api.GraphNodes
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_mesh_api_proto_init() }
func file_mesh_api_proto_init() {
	if File_mesh_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mesh_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mesh_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mesh_api_proto_goTypes,
		DependencyIndexes: file_mesh_api_proto_depIdxs,
		MessageInfos:      file_mesh_api_proto_msgTypes,
	}.Build()
	File_mesh_api_proto = out.File
	file_mesh_api_proto_rawDesc = nil
	file_mesh_api_proto_goTypes = nil
	file_mesh_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResourceMeshRPCClient is the client API for ResourceMeshRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceMeshRPCClient interface {
	UpdateNodeInformation(ctx context.Context, in *NodeInformation, opts ...grpc.CallOption) (*Response, error)
	GetNodeInformation(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*NodeInformation, error)
	GetAllNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GraphNodes, error)
}

type resourceMeshRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceMeshRPCClient(cc grpc.ClientConnInterface) ResourceMeshRPCClient {
	return &resourceMeshRPCClient{cc}
}

func (c *resourceMeshRPCClient) UpdateNodeInformation(ctx context.Context, in *NodeInformation, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.ResourceMeshRPC/UpdateNodeInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceMeshRPCClient) GetNodeInformation(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*NodeInformation, error) {
	out := new(NodeInformation)
	err := c.cc.Invoke(ctx, "/api.ResourceMeshRPC/GetNodeInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceMeshRPCClient) GetAllNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GraphNodes, error) {
	out := new(GraphNodes)
	err := c.cc.Invoke(ctx, "/api.ResourceMeshRPC/GetAllNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceMeshRPCServer is the server API for ResourceMeshRPC service.
type ResourceMeshRPCServer interface {
	UpdateNodeInformation(context.Context, *NodeInformation) (*Response, error)
	GetNodeInformation(context.Context, *NodeId) (*NodeInformation, error)
	GetAllNodes(context.Context, *Empty) (*GraphNodes, error)
}

// UnimplementedResourceMeshRPCServer can be embedded to have forward compatible implementations.
type UnimplementedResourceMeshRPCServer struct {
}

func (*UnimplementedResourceMeshRPCServer) UpdateNodeInformation(context.Context, *NodeInformation) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeInformation not implemented")
}
func (*UnimplementedResourceMeshRPCServer) GetNodeInformation(context.Context, *NodeId) (*NodeInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInformation not implemented")
}
func (*UnimplementedResourceMeshRPCServer) GetAllNodes(context.Context, *Empty) (*GraphNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNodes not implemented")
}

func RegisterResourceMeshRPCServer(s *grpc.Server, srv ResourceMeshRPCServer) {
	s.RegisterService(&_ResourceMeshRPC_serviceDesc, srv)
}

func _ResourceMeshRPC_UpdateNodeInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMeshRPCServer).UpdateNodeInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ResourceMeshRPC/UpdateNodeInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMeshRPCServer).UpdateNodeInformation(ctx, req.(*NodeInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceMeshRPC_GetNodeInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMeshRPCServer).GetNodeInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ResourceMeshRPC/GetNodeInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMeshRPCServer).GetNodeInformation(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceMeshRPC_GetAllNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMeshRPCServer).GetAllNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ResourceMeshRPC/GetAllNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMeshRPCServer).GetAllNodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceMeshRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ResourceMeshRPC",
	HandlerType: (*ResourceMeshRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateNodeInformation",
			Handler:    _ResourceMeshRPC_UpdateNodeInformation_Handler,
		},
		{
			MethodName: "GetNodeInformation",
			Handler:    _ResourceMeshRPC_GetNodeInformation_Handler,
		},
		{
			MethodName: "GetAllNodes",
			Handler:    _ResourceMeshRPC_GetAllNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mesh_api.proto",
}
