// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerAdvisorClient is the client API for SchedulerAdvisor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerAdvisorClient interface {
	GetCosts(ctx context.Context, in *ReschedulingRequest, opts ...grpc.CallOption) (*ReconfigurationCost, error)
}

type schedulerAdvisorClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerAdvisorClient(cc grpc.ClientConnInterface) SchedulerAdvisorClient {
	return &schedulerAdvisorClient{cc}
}

func (c *schedulerAdvisorClient) GetCosts(ctx context.Context, in *ReschedulingRequest, opts ...grpc.CallOption) (*ReconfigurationCost, error) {
	out := new(ReconfigurationCost)
	err := c.cc.Invoke(ctx, "/internal.SchedulerAdvisor/GetCosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerAdvisorServer is the server API for SchedulerAdvisor service.
// All implementations must embed UnimplementedSchedulerAdvisorServer
// for forward compatibility
type SchedulerAdvisorServer interface {
	GetCosts(context.Context, *ReschedulingRequest) (*ReconfigurationCost, error)
	mustEmbedUnimplementedSchedulerAdvisorServer()
}

// UnimplementedSchedulerAdvisorServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerAdvisorServer struct {
}

func (*UnimplementedSchedulerAdvisorServer) GetCosts(context.Context, *ReschedulingRequest) (*ReconfigurationCost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosts not implemented")
}
func (*UnimplementedSchedulerAdvisorServer) mustEmbedUnimplementedSchedulerAdvisorServer() {}

func RegisterSchedulerAdvisorServer(s *grpc.Server, srv SchedulerAdvisorServer) {
	s.RegisterService(&_SchedulerAdvisor_serviceDesc, srv)
}

func _SchedulerAdvisor_GetCosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReschedulingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerAdvisorServer).GetCosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.SchedulerAdvisor/GetCosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerAdvisorServer).GetCosts(ctx, req.(*ReschedulingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulerAdvisor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.SchedulerAdvisor",
	HandlerType: (*SchedulerAdvisorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCosts",
			Handler:    _SchedulerAdvisor_GetCosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advisor.proto",
}
